---
import Banner from '../components/Banner.astro';
import { getImage } from 'astro:assets';
import '../styles/global.css';
// Supports weights 100-900
import '@fontsource-variable/dm-sans';
import '@fontsource/dm-mono/300.css';
import '@fontsource/dm-mono/400.css';
import '@fontsource/dm-mono/500.css';
import Footer from '../components/Footer.astro';
import Header from '../components/Header.astro';
import {
  SITE_NAME,
  SITE_TITLE,
  SITE_DESCRIPTION,
  SITE_IMAGE,
  KEYWORDS,
} from '../consts';
import { generateContentUTM, generateSocialUTM, addUTMToURL } from '../lib/utm';
import { ConsentManagerLayout } from './ConsentManager';

// Define props interface
export interface Props {
  title?: string;
  description?: string;
  image?: string;
  keywords?: string;
  author?: string;
  pubDate?: Date;
  updatedDate?: Date;
  tags?: string[];
  imageAlt?: string;
  twitterSite?: string; // e.g. @pwv
  locale?: string; // e.g. en_US
  redirectAfter?: number; // seconds to redirect after, 0 or undefined = no redirect
  redirectUrl?: string; // URL to redirect to (defaults to '/' if not specified)
  enableUTMTracking?: boolean; // enable UTM tracking for social sharing
  contentType?: 'post' | 'portfolio' | 'about' | 'apply'; // content type for UTM tracking
  contentSlug?: string; // content slug for UTM tracking
}

const {
  title = SITE_TITLE,
  description = SITE_DESCRIPTION,
  image = SITE_IMAGE,
  keywords = KEYWORDS,
  author,
  pubDate,
  updatedDate,
  tags,
  imageAlt,
  twitterSite = '@PWVentures',
  locale = 'en_US',
  redirectAfter,
  redirectUrl = '/',
  enableUTMTracking = true,
  contentType,
  contentSlug,
} = Astro.props;

export const isProduction = process.env.CONTEXT === 'production';
export const isDeployPreview = process.env.CONTEXT === 'deploy-preview';
// Use Netlify deploy preview URL for canonical URL when not in production
const baseURL = isDeployPreview
  ? process.env.DEPLOY_PRIME_URL || Astro.site
  : Astro.site;
const canonicalURL = new URL(Astro.url.pathname, baseURL);

// Generate UTM-tracked URLs for social sharing if enabled
let socialSharingURL = canonicalURL.toString();
let twitterSharingURL = canonicalURL.toString();
let ogSharingURL = canonicalURL.toString();

if (enableUTMTracking && contentType) {
  // Generate platform-specific UTM parameters
  const contentUTMParams = generateContentUTM(contentType, contentSlug);
  const twitterUTMParams = generateSocialUTM(
    'twitter',
    contentSlug || 'twitter_share'
  );
  const generalUTMParams = generateSocialUTM(
    'general',
    contentSlug || 'general_share'
  );

  // Apply UTM parameters to URLs
  socialSharingURL = addUTMToURL(canonicalURL.toString(), contentUTMParams);
  twitterSharingURL = addUTMToURL(canonicalURL.toString(), twitterUTMParams);
  ogSharingURL = addUTMToURL(canonicalURL.toString(), generalUTMParams);
}

// Make socialSharingURL available to child components via Astro.locals
Astro.locals.socialSharingURL = socialSharingURL;

// Use relative paths for static assets so they work in deploy previews
// and add a version query parameter to bust caches using Netlify's deploy history.
const version = import.meta.env.COMMIT_REF || Date.now();
const faviconURL = `/favicon.png?v=${version}`;
const favicon16URL = `/favicon-16x16.png?v=${version}`;
const favicon32URL = `/favicon-32x32.png?v=${version}`;
const appleTouchIconURL = `/apple-touch-icon.png?v=${version}`;
const manifestURL = '/site.webmanifest';
const sitemapURL = '/sitemap.xml';
const rssURL = '/rss.xml';

// Optimize image for OG tags if provided
let optimizedImageURL;
if (image) {
  const optimizedImage = await getImage({
    src: image,
    width: 1200, // Recommended OG image width
    height: 630, // Recommended OG image height
    // format unspecified will use webp, avif, or original format
  });
  optimizedImageURL = new URL(optimizedImage.src, canonicalURL);
}
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <link rel="icon" type="image/png" href={faviconURL} />
    <link rel="icon" type="image/png" sizes="32x32" href={favicon32URL} />
    <link rel="icon" type="image/png" sizes="16x16" href={favicon16URL} />
    <link rel="apple-touch-icon" sizes="180x180" href={appleTouchIconURL} />
    <link rel="manifest" href={manifestURL} />
    <link
      rel="alternate"
      type="application/rss+xml"
      title="PWV Feed"
      href={rssURL}
    />
    <meta name="theme-color" content="#ffffff" />
    <meta name="generator" content={Astro.generator} />

    <!-- Auto redirect if specified -->
    {
      redirectAfter && redirectAfter > 0 && (
        <meta
          http-equiv="refresh"
          content={`${redirectAfter}; url=${redirectUrl}`}
        />
      )
    }

    <!-- Font preloads -->

    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalURL} />

    <!-- Primary Meta Tags -->
    <title>{`${SITE_NAME} - ${title}`}</title>
    <meta name="title" content={`${SITE_NAME} - ${title}`} />
    <meta name="description" content={description} />
    <meta name="keywords" content={keywords} />
    {author && <meta name="author" content={author} />}
    <meta name="robots" content="index,follow" />

    <meta property="og:type" content="website" />
    <meta property="og:url" content={ogSharingURL} />
    <meta property="og:title" content={`${SITE_NAME} - ${title}`} />
    <meta property="og:description" content={description} />
    <meta property="og:site_name" content={SITE_NAME} />
    <meta property="og:locale" content={locale} />
    {author && <meta property="article:author" content={author} />}
    {
      optimizedImageURL && (
        <meta property="og:image" content={optimizedImageURL} />
      )
    }
    {
      optimizedImageURL && (
        <>
          <meta property="og:image:width" content="1200" />
          <meta property="og:image:height" content="630" />
          <meta property="og:image:alt" content={imageAlt ?? title} />
        </>
      )
    }
    {
      pubDate && (
        <meta
          property="article:published_time"
          content={pubDate.toISOString()}
        />
      )
    }
    {
      updatedDate && (
        <meta
          property="article:modified_time"
          content={updatedDate.toISOString()}
        />
      )
    }
    {tags && tags.map((tag) => <meta property="article:tag" content={tag} />)}

    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={twitterSharingURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    {twitterSite && <meta name="twitter:site" content={twitterSite} />}
    {author && <meta name="twitter:creator" content={author} />}
    {
      optimizedImageURL && (
        <meta property="twitter:image" content={optimizedImageURL} />
      )
    }
    {
      optimizedImageURL && (
        <meta name="twitter:image:alt" content={imageAlt ?? title} />
      )
    }

    {
      isProduction && (
        <script
          defer
          data-domain="pwv.com"
          src="https://plausible.io/js/script.js"
        />
      )
    }
  </head>
  <body>
    <Banner
      message="Announcing PWV Fund I"
      href="/news/post-announcing-pwv-fund-i"
      storageKey="pwv-fund-i-banner-dismissed"
    />
    <main class="container mx-auto min-h-dvh max-w-screen-xl px-4 xl:px-0">
      <ConsentManagerLayout client:only="react">
        <Header />
        <slot />
      </ConsentManagerLayout>
    </main>
  </body>
</html>
<Footer />
