---
import Heading1 from '../../components/Heading1.astro';
import { render } from 'astro:content';
import SmartImage from '../../components/SmartImage.astro';
import Layout from '../../layouts/Layout.astro';
import PlaceholderImage from '../../components/PlaceholderImage.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import PostNavigation from '../../components/PostNavigation.astro';

import {
  getReadingTime,
  getPostNavigation,
  getPostBySlug,
  getAllPosts,
  authorToSlug,
  tagToSlug,
} from '../../lib/news';
import { KEYWORDS } from '../../consts';

export async function getStaticPaths() {
  const allPosts = await getAllPosts();
  return allPosts.map((post) => ({
    params: { slug: post.id },
    props: { post },
  }));
}

const { post } = Astro.props;

if (!post) {
  return Astro.redirect('/404');
}

const { Content } = await render(post);
const { nextPost, previousPost } = await getPostNavigation(post.id);

// Generate meta data from post
const title = post.data.title;
const layoutTitle = 'News | ' + post.data.title + ' by ' + post.data.author;
const description = post.data.description;
const image = post.data.heroImage || '/og-image.png';
const keywords = post.data.tags.join(', ') + ', ' + KEYWORDS;
---

<Layout
  title={layoutTitle}
  description={description}
  image={image}
  keywords={keywords}
  author={post.data.author}
  pubDate={post.data.pubDate}
  updatedDate={post.data.updatedDate}
  tags={post.data.tags}
  imageAlt={post.data.title}
  locale="en_US"
  enableUTMTracking={true}
  contentType="post"
  contentSlug={post.id}
  redirectAfter={post.data.url ? 3 : undefined}
  redirectUrl={post.data.url}
>
  <div class="prose prose-lg max-w-screen-xl">
    <!-- Responsive layout: stacked on small, 50/50 side-by-side on medium+ -->
    <div class="flex flex-col md:flex-row md:items-center md:gap-8 lg:gap-12">
      <!-- Left column: title, description, author -->
      <div class="md:w-1/2">
        <Heading1>{title}</Heading1>

        <p>
          {post.data.description}
        </p>
        <p class="text-subtle text-sm">
          Written by{' '}
          {post.data.author ? (
            <a
              href={`/news/author/${authorToSlug(post.data.author)}`}
              class="text-pwv-black hover:text-pwv-green underline transition-colors"
            >
              {post.data.author}
            </a>
          ) : (
            'Unknown'
          )}
          {
            (() => {
              const readingTime = getReadingTime(post.body);
              return readingTime > 0 ? ` ‚Ä¢ ${readingTime} min read` : '';
            })()
          }
        </p>
      </div>

      <!-- Right column: image -->
      <div class="md:w-1/2">
        {
          post.data.heroImage ? (
            <div class="">
              <SmartImage
                src={post.data.heroImage}
                alt={post.data.title}
                size="hero"
                rounded={true}
                shadow={true}
                class="h-auto w-full object-contain"
                loading="eager"
              />
            </div>
          ) : (
            <PlaceholderImage
              alt={`Hero image for ${post.data.title}`}
              class="mb-8 h-64 w-full rounded-lg"
            />
          )
        }
      </div>
    </div>
    <!-- External link for posts with URL -->
    {
      post.data.url && (
        <div class="border-default bg-surface-muted mt-8 rounded-lg border p-6">
          <p class="text-muted mb-3 text-sm">
            This is an external article from our community.
          </p>
          <a
            href={post.data.url}
            target="_blank"
            rel="noopener noreferrer"
            class="bg-primary fg-on-primary hover:bg-primary-hover inline-flex items-center gap-2 rounded-lg px-4 py-2 font-medium transition-colors duration-200"
          >
            Read full article on{' '}
            {new URL(post.data.url).hostname.replace('www.', '')}
            <svg
              class="h-4 w-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
              />
            </svg>
          </a>
        </div>
      )
    }
    <div class="mt-8 flex items-center justify-between">
      <div class="flex flex-wrap gap-2">
        {
          post.data.tags.map((tag) => (
            <a
              href={`/news/tags/${tagToSlug(tag)}`}
              class="border-default text-pwv-black border-pwv-green hover:bg-pwv-light-green rounded-lg border p-2 font-mono text-sm transition-colors"
            >
              {tag}
            </a>
          ))
        }
      </div>
      <p class="ml-auto text-sm whitespace-nowrap">
        üóìÔ∏è <FormattedDate date={post.data.pubDate} />
      </p>
    </div>
    <hr />
    <section class="max-w-screen-lg">
      <Content />
    </section>

    <!-- Post Navigation -->
    <PostNavigation
      currentPost={post}
      nextPost={nextPost}
      previousPost={previousPost}
    />
  </div>
</Layout>
