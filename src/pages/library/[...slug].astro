---
import { type CollectionEntry } from 'astro:content';
import { render } from 'astro:content';
import SmartImage from '../../components/SmartImage.astro';
import Layout from '../../layouts/Layout.astro';
import PlaceholderImage from '../../components/PlaceholderImage.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import PostNavigation from '../../components/PostNavigation.astro';
import {
  getAllLibraryPosts,
  getReadingTime,
  getPostNavigation,
} from '../../lib/library';

// if Netlify output is server, then *must* be true
export const prerender = true;

export async function getStaticPaths() {
  const posts = await getAllLibraryPosts();
  return posts.map((post) => ({
    params: { slug: post.id },
    props: post,
  }));
}
type Props = CollectionEntry<'library'>;

const post = Astro.props;
const { Content } = await render(post);
const { nextPost, previousPost } = await getPostNavigation(post.id);

// Generate meta data from post
const title = post.data.title;
const description = post.data.description;
const image = post.data.heroImage ? post.data.heroImage.src : '/og-image.png';
const keywords = post.data.tags.join(', ');
---

<Layout
  title={title}
  description={description}
  image={image}
  keywords={keywords}
>
  <div class="prose prose-lg mx-auto max-w-screen-xl">
    <div class="mx-auto w-full md:w-full lg:w-2/3">
      {
        post.data.heroImage ? (
          <SmartImage
            src={post.data.heroImage}
            alt={post.data.title}
            size="full"
            rounded={true}
            shadow={true}
            class="mb-8"
            loading="eager"
          />
        ) : (
          <PlaceholderImage
            alt={`Hero image for ${post.data.title}`}
            class="mb-8 h-64 w-full rounded-lg"
          />
        )
      }
    </div>
    <h1>{title}</h1>
    <h2>
      {post.data.description}
    </h2>
    <h3>Posted by {post.data.author} ‚Ä¢ {getReadingTime(post.body)} min read</h3>
    <div class="flex items-center justify-between">
      <div class="flex flex-wrap gap-2">
        {
          post.data.tags.map((tag) => (
            <span class="rounded-lg border border-gray-200 p-2 font-mono text-sm text-gray-500">
              {tag}
            </span>
          ))
        }
      </div>
      <p class="ml-auto text-sm whitespace-nowrap">
        üóìÔ∏è <FormattedDate date={post.data.pubDate} />
      </p>
    </div>
    <hr />
    <Content />

    <!-- External link for posts with URL -->
    {
      post.data.url && (
        <div class="mt-8 rounded-lg border border-gray-200 bg-gray-50 p-6">
          <p class="mb-3 text-sm text-gray-600">
            This is an external article from our library.
          </p>
          <a
            href={post.data.url}
            target="_blank"
            rel="noopener noreferrer"
            class="inline-flex items-center gap-2 rounded-lg bg-[var(--pwv-blue)] px-4 py-2 font-medium text-white transition-colors duration-200 hover:bg-[var(--pwv-blue)]"
          >
            Read full article on{' '}
            {new URL(post.data.url).hostname.replace('www.', '')}
            <svg
              class="h-4 w-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
              />
            </svg>
          </a>
        </div>
      )
    }

    <!-- Post Navigation -->
    <PostNavigation
      currentPost={post}
      nextPost={nextPost}
      previousPost={previousPost}
    />
  </div>
</Layout>
