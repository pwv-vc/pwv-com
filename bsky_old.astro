---
import BaseHead from './components/BaseHead.astro';
import Header from './components/Header.astro';
import Footer from './components/Footer.astro';
import { AtpAgent } from '@atproto/api';
import { SITE_TITLE, SITE_DESCRIPTION } from './consts';
import { formatDistanceToNow } from 'date-fns';

// Initialize the BlueSky agent``
const agent = new AtpAgent({ service: 'https://bsky.social' });

// Login using environment variables
try {
  await agent.login({
    identifier: import.meta.env.BSKY_USERNAME,
    password: import.meta.env.BSKY_APP_PASSWORD,
  });
} catch (error) {
  console.error('Failed to login to BlueSky:', error);
}

// The DID for your account:
const myDid = agent.session?.did;

const PWV_PORTFOLIO_FEED_ID = '3lbkbx6khxa22';
const listUri = `at://${myDid}/app.bsky.graph.list/${PWV_PORTFOLIO_FEED_ID}`;

let postsArray = [];
let nextPage = '';
const limit = 24; // 20 posts per page

// Get cursor from URL params
const cursor = Astro.url.searchParams.get('cursor') || '';

try {
  const { data } = (await agent.api.app.bsky.feed.getListFeed({
    list: listUri,
    cursor,
    limit, // optional
  })) as {
    data: {
      feed: any[];
      cursor: string;
    };
  };

  // Build link with the handle:
  postsArray = data.feed.map((item) => ({
    ...item,
    handle: item.post.author.handle,
    rkey: item.post.uri.split('/')[4],
    postLink: `https://bsky.app/profile/${item.post.author.handle}/post/${item.post.uri.split('/')[4]}`,
    formattedDate: formatDistanceToNow(item.post.record.createdAt, {
      addSuffix: true,
    }),
  }));

  // console log the first post json string
  // console.log(JSON.stringify(postsArray[0], null, 2));

  nextPage = data.cursor ?? '';
} catch (error) {
  console.error('Failed to fetch feed:', error);
}

export const prerender = false;

// The browser should always check freshness
Astro.response.headers.set(
  'cache-control',
  'public, max-age=0, must-revalidate'
);

// The CDN should cache for an hour, but revalidate if the cache tag changes
Astro.response.headers.set('netlify-cdn-cache-control', 's-maxage=3600');

// Tag the page with the content type
// cache tag is used to invalidate the cache when the page is updated
// tag is made up of the first post's rkey
const cacheTag = postsArray[0]?.rkey ?? 'pwv-portfolio-feed';
Astro.response.headers.set('netlify-cache-tag', cacheTag);
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead
      title={`PWV Portfolio Feed | ${SITE_TITLE}`}
      description={SITE_DESCRIPTION}
    />
  </head>
  <body>
    <main class="md:max-w-2xl lg:max-w-3xl mx-auto px-4 md:px-6">
      <Header />
      <h1 class="text-4xl font-bold mb-4">PWV Portfolio Feed</h1>
      <h2 class="text-xl font-bold mb-4 text-gray-500 font-sans">
        What our portfolio companies are saying on BlueSky...
      </h2>
      <div class="space-y-6 font-sans">
        {
          postsArray.map((item) => (
            <article class="bg-white rounded-lg p-6 shadow-md hover:shadow-lg transition-shadow">
              <a href={item.postLink} target="_blank" class="block">
                {/* Author section */}
                <div class="flex items-center gap-4 w-full border-b border-gray-100 pb-3">
                  <img
                    src={item.post.author.avatar}
                    alt={item.post.author.displayName}
                    class="w-12 h-12 rounded-full"
                  />
                  <div class="flex flex-col">
                    <div class="flex items-center gap-2">
                      {item.post.author.displayName && (
                        <span class="font-semibold">
                          {item.post.author.displayName}
                        </span>
                      )}
                      <span class="text-gray-600">
                        @{item.post.author.handle}
                      </span>
                    </div>
                    <span class="text-gray-500 text-sm">
                      {item.formattedDate}
                    </span>
                  </div>
                </div>

                {/* Content section */}
                <div class="py-3 border-b border-gray-100">
                  <p class="w-full">{item.post.record.text}</p>
                  {item.post.embed?.images?.[0]?.thumb && (
                    <img
                      src={item.post.embed.images[0].thumb}
                      alt={item.post.embed.images[0].alt || 'Post thumbnail'}
                      class="mt-3 rounded-lg max-w-full w-3/4 object-cover"
                    />
                  )}
                  {item.post.embed?.$type === 'app.bsky.embed.video#view' && (
                    <div class="mt-3 relative">
                      <img
                        src={item.post.embed.thumbnail}
                        alt="Video thumbnail"
                        class="rounded-lg max-w-full w-3/4 object-cover"
                      />
                      <a
                        href={item.post.embed.playlist}
                        target="_blank"
                        class="absolute inset-0 flex items-center justify-center"
                      >
                        <div class="w-12 h-12 bg-black bg-opacity-50 rounded-full flex items-center justify-center">
                          <div class="w-0 h-0 border-t-8 border-t-transparent border-l-12 border-l-white border-b-8 border-b-transparent ml-1" />
                        </div>
                      </a>
                    </div>
                  )}
                </div>

                {/* Engagement counts section */}
                <div class="w-full flex justify-between text-gray-500 text-sm pt-3">
                  <span class="flex items-center gap-1">
                    üí¨ {item.post.replyCount}
                  </span>
                  <span class="flex items-center gap-1">
                    üîÑ {item.post.repostCount}
                  </span>
                  <span class="flex items-center gap-1">
                    ‚ù§Ô∏è {item.post.likeCount}
                  </span>
                </div>
              </a>
            </article>
          ))
        }
      </div>

      <!-- Add pagination links -->
      <div class="my-8 flex justify-between items-center font-sans">
        {
          cursor && (
            <div class="flex gap-4">
              <a
                href="/feeds"
                class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
              >
                Previous
              </a>
              <a
                href="/feeds?cursor="
                class="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
              >
                Top
              </a>
            </div>
          )
        }
        {
          nextPage && (
            <a
              href={`/feeds?cursor=${nextPage}`}
              class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 ml-auto"
            >
              Next
            </a>
          )
        }
      </div>
    </main>
  </body>
</html>
